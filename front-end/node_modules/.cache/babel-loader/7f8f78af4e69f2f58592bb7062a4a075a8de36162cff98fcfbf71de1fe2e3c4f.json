{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohan\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\front-end\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  user\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const messagesEndRef = useRef(null);\n  const socketRef = useRef();\n\n  // Safe content rendering function\n  const renderSafeContent = content => {\n    if (typeof content === 'string') return content;\n    if (typeof content === 'number') return content.toString();\n    if (typeof content === 'object' && content !== null) {\n      try {\n        return JSON.stringify(content);\n      } catch (e) {\n        return String(content);\n      }\n    }\n    return String(content);\n  };\n\n  // Function to format message with line breaks and bold text\n  const formatMessageWithLineBreaks = text => {\n    if (typeof text !== 'string') return text;\n    const lines = text.split('\\n');\n    return lines.map((line, index) => {\n      if (line.trim() === '') {\n        return /*#__PURE__*/_jsxDEV(\"br\", {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 16\n        }, this);\n      }\n\n      // Handle bold formatting (**text**)\n      const parts = line.split(/\\*\\*(.*?)\\*\\*/g);\n      const formattedLine = parts.map((part, i) => {\n        if (i % 2 === 1) {\n          return /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: part\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 18\n          }, this);\n        }\n        return part;\n      });\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [formattedLine, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  useEffect(() => {\n    socketRef.current = io('http://localhost:5000', {\n      auth: {\n        token: localStorage.getItem('token')\n      }\n    });\n    socketRef.current.on('connect', () => {\n      console.log('Connected to server');\n      setConnectionStatus('connected');\n    });\n    socketRef.current.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setConnectionStatus('disconnected');\n    });\n    socketRef.current.on('chat_message', data => {\n      setIsTyping(false);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: renderSafeContent(data.message),\n        sender: 'bot',\n        timestamp: new Date()\n      }]);\n    });\n    socketRef.current.on('bot_typing', () => {\n      setIsTyping(true);\n    });\n    socketRef.current.on('error', error => {\n      console.error('Socket error:', error);\n      setIsTyping(false);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Sorry, I'm having trouble connecting. Please try again.\",\n        sender: 'bot',\n        timestamp: new Date()\n      }]);\n    });\n    fetchChatHistory();\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const fetchChatHistory = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/chat/history', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const history = await response.json();\n        const formattedHistory = history.map(chat => ({\n          id: chat.chat_id || Date.now(),\n          text: renderSafeContent(chat.query),\n          sender: 'user',\n          timestamp: new Date(chat.timestamp),\n          response: renderSafeContent(chat.response)\n        }));\n        setMessages(formattedHistory);\n      }\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (inputMessage.trim() === '') return;\n    const newMessage = {\n      id: Date.now(),\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n    if (socketRef.current) {\n      socketRef.current.emit('user_message', {\n        message: inputMessage,\n        userId: user === null || user === void 0 ? void 0 : user.id\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Health Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Hello, \", (user === null || user === void 0 ? void 0 : user.name) || 'User']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `connection-status ${connectionStatus}`,\n          children: connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Start a conversation with your health assistant!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You can ask about symptoms, medications, or general health advice.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this) : messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: formatMessageWithLineBreaks(renderSafeContent(message.text))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: new Date(message.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot-message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input-form\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Type your health question here...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isTyping || inputMessage.trim() === '',\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"7MDtHHEkv+E7Hd8tLvk72jW8Txc=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","jsxDEV","_jsxDEV","ChatInterface","user","_s","messages","setMessages","inputMessage","setInputMessage","isTyping","setIsTyping","connectionStatus","setConnectionStatus","messagesEndRef","socketRef","renderSafeContent","content","toString","JSON","stringify","e","String","formatMessageWithLineBreaks","text","lines","split","map","line","index","trim","fileName","_jsxFileName","lineNumber","columnNumber","parts","formattedLine","part","i","children","Fragment","current","auth","token","localStorage","getItem","on","console","log","data","prev","id","Date","now","message","sender","timestamp","error","fetchChatHistory","disconnect","scrollToBottom","response","fetch","headers","ok","history","json","formattedHistory","chat","chat_id","query","_messagesEndRef$curre","scrollIntoView","behavior","handleSendMessage","preventDefault","newMessage","emit","userId","className","name","length","toLocaleTimeString","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = ({ user }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const messagesEndRef = useRef(null);\r\n  const socketRef = useRef();\r\n\r\n  // Safe content rendering function\r\n  const renderSafeContent = (content) => {\r\n    if (typeof content === 'string') return content;\r\n    if (typeof content === 'number') return content.toString();\r\n    if (typeof content === 'object' && content !== null) {\r\n      try {\r\n        return JSON.stringify(content);\r\n      } catch (e) {\r\n        return String(content);\r\n      }\r\n    }\r\n    return String(content);\r\n  };\r\n\r\n  // Function to format message with line breaks and bold text\r\n  const formatMessageWithLineBreaks = (text) => {\r\n    if (typeof text !== 'string') return text;\r\n    \r\n    const lines = text.split('\\n');\r\n    return lines.map((line, index) => {\r\n      if (line.trim() === '') {\r\n        return <br key={index} />;\r\n      }\r\n      \r\n      // Handle bold formatting (**text**)\r\n      const parts = line.split(/\\*\\*(.*?)\\*\\*/g);\r\n      const formattedLine = parts.map((part, i) => {\r\n        if (i % 2 === 1) {\r\n          return <strong key={i}>{part}</strong>;\r\n        }\r\n        return part;\r\n      });\r\n      \r\n      return (\r\n        <React.Fragment key={index}>\r\n          {formattedLine}\r\n          <br />\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io('http://localhost:5000', {\r\n      auth: {\r\n        token: localStorage.getItem('token')\r\n      }\r\n    });\r\n\r\n    socketRef.current.on('connect', () => {\r\n      console.log('Connected to server');\r\n      setConnectionStatus('connected');\r\n    });\r\n\r\n    socketRef.current.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      setConnectionStatus('disconnected');\r\n    });\r\n\r\n    socketRef.current.on('chat_message', (data) => {\r\n      setIsTyping(false);\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: renderSafeContent(data.message),\r\n        sender: 'bot',\r\n        timestamp: new Date()\r\n      }]);\r\n    });\r\n\r\n    socketRef.current.on('bot_typing', () => {\r\n      setIsTyping(true);\r\n    });\r\n\r\n    socketRef.current.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n      setIsTyping(false);\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: \"Sorry, I'm having trouble connecting. Please try again.\",\r\n        sender: 'bot',\r\n        timestamp: new Date()\r\n      }]);\r\n    });\r\n\r\n    fetchChatHistory();\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const fetchChatHistory = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('http://localhost:5000/chat/history', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const history = await response.json();\r\n        const formattedHistory = history.map(chat => ({\r\n          id: chat.chat_id || Date.now(),\r\n          text: renderSafeContent(chat.query),\r\n          sender: 'user',\r\n          timestamp: new Date(chat.timestamp),\r\n          response: renderSafeContent(chat.response)\r\n        }));\r\n        setMessages(formattedHistory);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching chat history:', error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (inputMessage.trim() === '') return;\r\n\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      text: inputMessage,\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, newMessage]);\r\n    setInputMessage('');\r\n    setIsTyping(true);\r\n\r\n    if (socketRef.current) {\r\n      socketRef.current.emit('user_message', {\r\n        message: inputMessage,\r\n        userId: user?.id\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <header className=\"chat-header\">\r\n        <h2>Health Assistant</h2>\r\n        <div className=\"user-info\">\r\n          <span>Hello, {user?.name || 'User'}</span>\r\n          <span className={`connection-status ${connectionStatus}`}>\r\n            {connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'}\r\n          </span>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"empty-chat\">\r\n            <p>Start a conversation with your health assistant!</p>\r\n            <p>You can ask about symptoms, medications, or general health advice.</p>\r\n          </div>\r\n        ) : (\r\n          messages.map((message) => (\r\n            <div\r\n              key={message.id}\r\n              className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\r\n            >\r\n              <div className=\"message-content\">\r\n                <div className=\"message-text\">\r\n                  {formatMessageWithLineBreaks(renderSafeContent(message.text))}\r\n                </div>\r\n                <span className=\"message-time\">\r\n                  {new Date(message.timestamp).toLocaleTimeString()}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        {isTyping && (\r\n          <div className=\"message bot-message\">\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n          placeholder=\"Type your health question here...\"\r\n          disabled={isTyping}\r\n        />\r\n        <button type=\"submit\" disabled={isTyping || inputMessage.trim() === ''}>\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}