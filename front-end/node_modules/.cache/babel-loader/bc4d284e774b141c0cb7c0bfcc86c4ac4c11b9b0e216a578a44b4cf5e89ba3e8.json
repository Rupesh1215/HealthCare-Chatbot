{"ast":null,"code":"// utils/textCleaner.js\n\nexport const cleanTextForSpeech = text => {\n  if (typeof text !== 'string') return String(text);\n\n  // Step 1: Remove all markdown and formatting\n  let cleaned = text.replace(/\\*\\*(.*?)\\*\\*/g, '$1').replace(/\\*(.*?)\\*/g, '$1').replace(/`(.*?)`/g, '$1').replace(/#{1,6}\\s?/g, '').replace(/```[\\s\\S]*?```/g, '').replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1').replace(/<[^>]*>/g, '').replace(/[*#~`_\\-]/g, ' ');\n\n  // Step 2: Convert lists to natural speech\n  cleaned = cleaned.replace(/\\n\\s*[-*•]\\s*/g, '. ').replace(/\\n\\s*\\d+\\.\\s*/g, '. ');\n\n  // Step 3: Clean punctuation for speech\n  cleaned = cleaned.replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ').replace(/\\s*,\\s*/g, ' ').replace(/\\s*;\\s*/g, '. ').replace(/\\s*:\\s*/g, ' ').replace(/\\s*!\\s*/g, '. ').replace(/\\s*\\?\\s*/g, '. ').replace(/[\\[\\](){}\"']/g, ' ').replace(/@#$%&+=<>\\/\\\\\\|/g, ' ');\n\n  // Step 4: Normalize whitespace and add pauses\n  cleaned = cleaned.replace(/\\n+/g, '. ').replace(/\\s+/g, ' ').trim();\n\n  // Step 5: Ensure proper sentence endings\n  if (cleaned.length > 0 && !/[.!?]$/.test(cleaned)) {\n    cleaned += '.';\n  }\n  return cleaned;\n};\nexport const isHealthContent = text => {\n  if (typeof text !== 'string') return false;\n  const healthKeywords = ['fever', 'headache', 'cough', 'cold', 'stomach', 'pain', 'symptom', 'medicine', 'doctor', 'health', 'medical', 'advice', 'treatment', 'बुखार', 'सिरदर्द', 'खांसी', 'जुकाम', 'पेट', 'दर्द', 'लक्षण', 'दवा', 'डॉक्टर', 'स्वास्थ्य', 'चिकित्सा', 'सलाह', 'इलाज', 'జ్వరం', 'తలనొప్పి', 'దగ్గు', 'జలుబు', 'కడుపు', 'నొప్పి', 'లక్షణం', 'మందు', 'డాక్టర్', 'ఆరోగ్యం', 'వైద్యం', 'సలహా', 'చికిత్స'\n  // Add keywords for other languages...\n  ];\n  const lowerText = text.toLowerCase();\n  return healthKeywords.some(keyword => lowerText.includes(keyword));\n};","map":{"version":3,"names":["cleanTextForSpeech","text","String","cleaned","replace","trim","length","test","isHealthContent","healthKeywords","lowerText","toLowerCase","some","keyword","includes"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/utils/textCleaner.js"],"sourcesContent":["// utils/textCleaner.js\r\n\r\nexport const cleanTextForSpeech = (text) => {\r\n  if (typeof text !== 'string') return String(text);\r\n  \r\n  // Step 1: Remove all markdown and formatting\r\n  let cleaned = text\r\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\r\n    .replace(/\\*(.*?)\\*/g, '$1')\r\n    .replace(/`(.*?)`/g, '$1')\r\n    .replace(/#{1,6}\\s?/g, '')\r\n    .replace(/```[\\s\\S]*?```/g, '')\r\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1')\r\n    .replace(/<[^>]*>/g, '')\r\n    .replace(/[*#~`_\\-]/g, ' ');\r\n\r\n  // Step 2: Convert lists to natural speech\r\n  cleaned = cleaned\r\n    .replace(/\\n\\s*[-*•]\\s*/g, '. ')\r\n    .replace(/\\n\\s*\\d+\\.\\s*/g, '. ');\r\n\r\n  // Step 3: Clean punctuation for speech\r\n  cleaned = cleaned\r\n    .replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ')\r\n    .replace(/\\s*,\\s*/g, ' ')\r\n    .replace(/\\s*;\\s*/g, '. ')\r\n    .replace(/\\s*:\\s*/g, ' ')\r\n    .replace(/\\s*!\\s*/g, '. ')\r\n    .replace(/\\s*\\?\\s*/g, '. ')\r\n    .replace(/[\\[\\](){}\"']/g, ' ')\r\n    .replace(/@#$%&+=<>\\/\\\\\\|/g, ' ');\r\n\r\n  // Step 4: Normalize whitespace and add pauses\r\n  cleaned = cleaned\r\n    .replace(/\\n+/g, '. ')\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n\r\n  // Step 5: Ensure proper sentence endings\r\n  if (cleaned.length > 0 && !/[.!?]$/.test(cleaned)) {\r\n    cleaned += '.';\r\n  }\r\n\r\n  return cleaned;\r\n};\r\n\r\nexport const isHealthContent = (text) => {\r\n  if (typeof text !== 'string') return false;\r\n  \r\n  const healthKeywords = [\r\n    'fever', 'headache', 'cough', 'cold', 'stomach', 'pain', 'symptom',\r\n    'medicine', 'doctor', 'health', 'medical', 'advice', 'treatment',\r\n    'बुखार', 'सिरदर्द', 'खांसी', 'जुकाम', 'पेट', 'दर्द', 'लक्षण',\r\n    'दवा', 'डॉक्टर', 'स्वास्थ्य', 'चिकित्सा', 'सलाह', 'इलाज',\r\n    'జ్వరం', 'తలనొప్పి', 'దగ్గు', 'జలుబు', 'కడుపు', 'నొప్పి', 'లక్షణం',\r\n    'మందు', 'డాక్టర్', 'ఆరోగ్యం', 'వైద్యం', 'సలహా', 'చికిత్స'\r\n    // Add keywords for other languages...\r\n  ];\r\n  \r\n  const lowerText = text.toLowerCase();\r\n  return healthKeywords.some(keyword => lowerText.includes(keyword));\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,kBAAkB,GAAIC,IAAI,IAAK;EAC1C,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOC,MAAM,CAACD,IAAI,CAAC;;EAEjD;EACA,IAAIE,OAAO,GAAGF,IAAI,CACfG,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAC/BA,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAC3BA,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CACzBA,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CACzBA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAC9BA,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAClCA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;;EAE7B;EACAD,OAAO,GAAGA,OAAO,CACdC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAC/BA,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC;;EAElC;EACAD,OAAO,GAAGA,OAAO,CACdC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,CACjCA,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CACzBA,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CACzBA,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAC1BA,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC,CAC7BA,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;;EAEnC;EACAD,OAAO,GAAGA,OAAO,CACdC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CACrBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBC,IAAI,CAAC,CAAC;;EAET;EACA,IAAIF,OAAO,CAACG,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAE;IACjDA,OAAO,IAAI,GAAG;EAChB;EAEA,OAAOA,OAAO;AAChB,CAAC;AAED,OAAO,MAAMK,eAAe,GAAIP,IAAI,IAAK;EACvC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAO,KAAK;EAE1C,MAAMQ,cAAc,GAAG,CACrB,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAClE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAChE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAC5D,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EACxD,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAClE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE;EAChD;EAAA,CACD;EAED,MAAMC,SAAS,GAAGT,IAAI,CAACU,WAAW,CAAC,CAAC;EACpC,OAAOF,cAAc,CAACG,IAAI,CAACC,OAAO,IAAIH,SAAS,CAACI,QAAQ,CAACD,OAAO,CAAC,CAAC;AACpE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}