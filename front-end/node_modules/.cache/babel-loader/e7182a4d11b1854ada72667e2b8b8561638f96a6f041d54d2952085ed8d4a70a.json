{"ast":null,"code":"class SpeechSynthesis {\n  constructor() {\n    this.synth = window.speechSynthesis;\n    this.voices = [];\n    this.selectedVoice = null;\n    this.rate = 1.0;\n    this.pitch = 1.0;\n    this.volume = 0.8;\n    this.isInitialized = false;\n  }\n  async init() {\n    return new Promise(resolve => {\n      if (this.synth.getVoices().length > 0) {\n        this.voices = this.synth.getVoices();\n        this.selectVoice();\n        this.isInitialized = true;\n        resolve();\n      } else {\n        const checkVoices = () => {\n          if (this.synth.getVoices().length > 0) {\n            this.voices = this.synth.getVoices();\n            this.selectVoice();\n            this.isInitialized = true;\n            resolve();\n          } else {\n            setTimeout(checkVoices, 100);\n          }\n        };\n        this.synth.onvoiceschanged = checkVoices;\n        checkVoices();\n      }\n    });\n  }\n  selectVoice(language = 'en-US') {\n    // Try to find a voice that matches the language exactly\n    const exactMatch = this.voices.find(voice => voice.lang === language);\n    if (exactMatch) {\n      this.selectedVoice = exactMatch;\n      return;\n    }\n\n    // Fallback to voices that include the language code\n    const languageMatch = this.voices.find(voice => voice.lang.includes(language.split('-')[0]));\n    if (languageMatch) {\n      this.selectedVoice = languageMatch;\n      return;\n    }\n\n    // Final fallback to any available voice\n    this.selectedVoice = this.voices[0] || null;\n  }\n\n  // Enhanced text cleaning function for speech\n  cleanTextForSpeech(text) {\n    if (typeof text !== 'string') return String(text);\n\n    // Remove all markdown formatting, asterisks, bullets, numbers\n    let cleanedText = text.replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown but keep text\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic markdown but keep text\n    .replace(/```[\\s\\S]*?```/g, '') // Remove code blocks\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/#{1,6}\\s?/g, '') // Remove headers\n    .replace(/\\n\\s*[-*•]\\s*/g, '. ') // Convert bullet points to pauses\n    .replace(/\\n\\s*\\d+\\.\\s*/g, '. ') // Convert numbered lists to pauses\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove markdown links but keep text\n    .replace(/<[^>]*>/g, '') // Remove HTML tags\n    .replace(/\\*/g, '') // Remove remaining asterisks\n    .replace(/#/g, '') // Remove hash symbols\n    .replace(/`/g, '') // Remove backticks\n    .replace(/~/g, '') // Remove tildes\n    .replace(/_/g, ' ') // Replace underscores with spaces\n    .replace(/\\s+/g, ' ') // Collapse multiple spaces\n    .trim();\n\n    // Clean up punctuation for better speech flow\n    cleanedText = cleanedText.replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ') // Replace ellipses with single period\n    .replace(/\\s*,\\s*/g, ' ') // Remove commas (replace with natural pause)\n    .replace(/\\s*;\\s*/g, '. ') // Convert semicolons to pauses\n    .replace(/\\s*:\\s*/g, ' ') // Remove colons\n    .replace(/\\s*!\\s*/g, '. ') // Convert exclamations to pauses\n    .replace(/\\s*\\?\\s*/g, '. ') // Convert questions to pauses\n    .replace(/\\s*\\.\\s*/g, '. ') // Normalize periods\n    .replace(/\\.\\s*\\./g, '. ') // Remove consecutive periods\n    .replace(/\\s{2,}/g, ' ') // Remove extra spaces\n    .trim();\n\n    // Add natural pauses for better speech rhythm\n    cleanedText = cleanedText.replace(/\\.\\s+/g, '. ') // Ensure space after periods\n    .replace(/\\?\\s+/g, '? ') // Ensure space after questions\n    .replace(/!\\s+/g, '! ') // Ensure space after exclamations\n    .replace(/\\s+/g, ' '); // Ensure single spaces\n\n    // Remove any remaining special characters that might be read aloud\n    // FIXED: Properly escape special characters in regex\n    cleanedText = cleanedText.replace(/[\\[\\](){}\"']/g, ' ') // Remove brackets, quotes\n    .replace(/[@#$%^&*+=<>\\/\\\\\\|]/g, ' ') // FIXED: Proper regex for special characters\n    .replace(/\\s+/g, ' ') // Clean up spaces again\n    .trim();\n\n    // Ensure the text ends with proper punctuation\n    if (cleanedText.length > 0 && !/[.!?]$/.test(cleanedText)) {\n      cleanedText += '.';\n    }\n    return cleanedText;\n  }\n  async speak(text, language = 'en-US') {\n    if (!this.isInitialized) {\n      await this.init();\n    }\n    if (this.synth.speaking) {\n      this.synth.cancel();\n    }\n    this.selectVoice(language);\n\n    // Clean the text before speaking\n    const cleanedText = this.cleanTextForSpeech(text);\n    if (!cleanedText || cleanedText.trim().length === 0) {\n      console.log('No text to speak after cleaning');\n      return Promise.resolve();\n    }\n    console.log('Speaking cleaned text:', cleanedText);\n    const utterance = new SpeechSynthesisUtterance(cleanedText);\n    utterance.voice = this.selectedVoice;\n    utterance.rate = this.rate;\n    utterance.pitch = this.pitch;\n    utterance.volume = this.volume;\n    utterance.lang = language;\n\n    // Enhanced utterance settings for better speech quality\n    utterance.onstart = () => console.log('Speech started for language:', language);\n    utterance.onend = () => console.log('Speech ended');\n    utterance.onerror = event => console.error('Speech error:', event.error);\n    this.synth.speak(utterance);\n    return new Promise((resolve, reject) => {\n      utterance.onend = () => {\n        console.log('Speech synthesis completed successfully');\n        resolve();\n      };\n      utterance.onerror = event => {\n        console.error('Speech synthesis error:', event);\n        reject(event.error);\n      };\n\n      // Timeout fallback\n      setTimeout(() => {\n        if (this.synth.speaking) {\n          this.synth.cancel();\n          resolve();\n        }\n      }, 30000); // 30 second timeout\n    });\n  }\n  stop() {\n    this.synth.cancel();\n  }\n  isSpeaking() {\n    return this.synth.speaking;\n  }\n  getAvailableVoices() {\n    return this.voices;\n  }\n  getAvailableLanguages() {\n    const languages = new Set();\n    this.voices.forEach(voice => {\n      const langCode = voice.lang;\n      languages.add(langCode);\n    });\n    return Array.from(languages);\n  }\n\n  // Method to check if a language is supported\n  isLanguageSupported(language) {\n    return this.voices.some(voice => voice.lang.includes(language));\n  }\n}\n\n// Create a singleton instance\nexport const speechSynthesizer = new SpeechSynthesis();\n\n// Initialize on import\nspeechSynthesizer.init().catch(console.error);","map":{"version":3,"names":["SpeechSynthesis","constructor","synth","window","speechSynthesis","voices","selectedVoice","rate","pitch","volume","isInitialized","init","Promise","resolve","getVoices","length","selectVoice","checkVoices","setTimeout","onvoiceschanged","language","exactMatch","find","voice","lang","languageMatch","includes","split","cleanTextForSpeech","text","String","cleanedText","replace","trim","test","speak","speaking","cancel","console","log","utterance","SpeechSynthesisUtterance","onstart","onend","onerror","event","error","reject","stop","isSpeaking","getAvailableVoices","getAvailableLanguages","languages","Set","forEach","langCode","add","Array","from","isLanguageSupported","some","speechSynthesizer","catch"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/utils/speechSynthesis.js"],"sourcesContent":["class SpeechSynthesis {\r\n  constructor() {\r\n    this.synth = window.speechSynthesis;\r\n    this.voices = [];\r\n    this.selectedVoice = null;\r\n    this.rate = 1.0;\r\n    this.pitch = 1.0;\r\n    this.volume = 0.8;\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  async init() {\r\n    return new Promise((resolve) => {\r\n      if (this.synth.getVoices().length > 0) {\r\n        this.voices = this.synth.getVoices();\r\n        this.selectVoice();\r\n        this.isInitialized = true;\r\n        resolve();\r\n      } else {\r\n        const checkVoices = () => {\r\n          if (this.synth.getVoices().length > 0) {\r\n            this.voices = this.synth.getVoices();\r\n            this.selectVoice();\r\n            this.isInitialized = true;\r\n            resolve();\r\n          } else {\r\n            setTimeout(checkVoices, 100);\r\n          }\r\n        };\r\n        this.synth.onvoiceschanged = checkVoices;\r\n        checkVoices();\r\n      }\r\n    });\r\n  }\r\n\r\n  selectVoice(language = 'en-US') {\r\n    // Try to find a voice that matches the language exactly\r\n    const exactMatch = this.voices.find(voice => \r\n      voice.lang === language\r\n    );\r\n    \r\n    if (exactMatch) {\r\n      this.selectedVoice = exactMatch;\r\n      return;\r\n    }\r\n\r\n    // Fallback to voices that include the language code\r\n    const languageMatch = this.voices.find(voice => \r\n      voice.lang.includes(language.split('-')[0])\r\n    );\r\n    \r\n    if (languageMatch) {\r\n      this.selectedVoice = languageMatch;\r\n      return;\r\n    }\r\n\r\n    // Final fallback to any available voice\r\n    this.selectedVoice = this.voices[0] || null;\r\n  }\r\n\r\n  // Enhanced text cleaning function for speech\r\n  cleanTextForSpeech(text) {\r\n    if (typeof text !== 'string') return String(text);\r\n    \r\n    // Remove all markdown formatting, asterisks, bullets, numbers\r\n    let cleanedText = text\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown but keep text\r\n      .replace(/\\*(.*?)\\*/g, '$1')     // Remove italic markdown but keep text\r\n      .replace(/```[\\s\\S]*?```/g, '')  // Remove code blocks\r\n      .replace(/`(.*?)`/g, '$1')       // Remove inline code\r\n      .replace(/#{1,6}\\s?/g, '')       // Remove headers\r\n      .replace(/\\n\\s*[-*•]\\s*/g, '. ') // Convert bullet points to pauses\r\n      .replace(/\\n\\s*\\d+\\.\\s*/g, '. ') // Convert numbered lists to pauses\r\n      .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove markdown links but keep text\r\n      .replace(/<[^>]*>/g, '')         // Remove HTML tags\r\n      .replace(/\\*/g, '')              // Remove remaining asterisks\r\n      .replace(/#/g, '')               // Remove hash symbols\r\n      .replace(/`/g, '')               // Remove backticks\r\n      .replace(/~/g, '')               // Remove tildes\r\n      .replace(/_/g, ' ')              // Replace underscores with spaces\r\n      .replace(/\\s+/g, ' ')            // Collapse multiple spaces\r\n      .trim();\r\n\r\n    // Clean up punctuation for better speech flow\r\n    cleanedText = cleanedText\r\n      .replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ') // Replace ellipses with single period\r\n      .replace(/\\s*,\\s*/g, ' ')         // Remove commas (replace with natural pause)\r\n      .replace(/\\s*;\\s*/g, '. ')         // Convert semicolons to pauses\r\n      .replace(/\\s*:\\s*/g, ' ')          // Remove colons\r\n      .replace(/\\s*!\\s*/g, '. ')         // Convert exclamations to pauses\r\n      .replace(/\\s*\\?\\s*/g, '. ')        // Convert questions to pauses\r\n      .replace(/\\s*\\.\\s*/g, '. ')        // Normalize periods\r\n      .replace(/\\.\\s*\\./g, '. ')         // Remove consecutive periods\r\n      .replace(/\\s{2,}/g, ' ')           // Remove extra spaces\r\n      .trim();\r\n\r\n    // Add natural pauses for better speech rhythm\r\n    cleanedText = cleanedText\r\n      .replace(/\\.\\s+/g, '. ')           // Ensure space after periods\r\n      .replace(/\\?\\s+/g, '? ')           // Ensure space after questions\r\n      .replace(/!\\s+/g, '! ')            // Ensure space after exclamations\r\n      .replace(/\\s+/g, ' ');             // Ensure single spaces\r\n\r\n    // Remove any remaining special characters that might be read aloud\r\n    // FIXED: Properly escape special characters in regex\r\n    cleanedText = cleanedText\r\n      .replace(/[\\[\\](){}\"']/g, ' ')     // Remove brackets, quotes\r\n      .replace(/[@#$%^&*+=<>\\/\\\\\\|]/g, ' ') // FIXED: Proper regex for special characters\r\n      .replace(/\\s+/g, ' ')              // Clean up spaces again\r\n      .trim();\r\n\r\n    // Ensure the text ends with proper punctuation\r\n    if (cleanedText.length > 0 && !/[.!?]$/.test(cleanedText)) {\r\n      cleanedText += '.';\r\n    }\r\n\r\n    return cleanedText;\r\n  }\r\n\r\n  async speak(text, language = 'en-US') {\r\n    if (!this.isInitialized) {\r\n      await this.init();\r\n    }\r\n\r\n    if (this.synth.speaking) {\r\n      this.synth.cancel();\r\n    }\r\n\r\n    this.selectVoice(language);\r\n\r\n    // Clean the text before speaking\r\n    const cleanedText = this.cleanTextForSpeech(text);\r\n    \r\n    if (!cleanedText || cleanedText.trim().length === 0) {\r\n      console.log('No text to speak after cleaning');\r\n      return Promise.resolve();\r\n    }\r\n\r\n    console.log('Speaking cleaned text:', cleanedText);\r\n\r\n    const utterance = new SpeechSynthesisUtterance(cleanedText);\r\n    utterance.voice = this.selectedVoice;\r\n    utterance.rate = this.rate;\r\n    utterance.pitch = this.pitch;\r\n    utterance.volume = this.volume;\r\n    utterance.lang = language;\r\n\r\n    // Enhanced utterance settings for better speech quality\r\n    utterance.onstart = () => console.log('Speech started for language:', language);\r\n    utterance.onend = () => console.log('Speech ended');\r\n    utterance.onerror = (event) => console.error('Speech error:', event.error);\r\n\r\n    this.synth.speak(utterance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      utterance.onend = () => {\r\n        console.log('Speech synthesis completed successfully');\r\n        resolve();\r\n      };\r\n      utterance.onerror = (event) => {\r\n        console.error('Speech synthesis error:', event);\r\n        reject(event.error);\r\n      };\r\n      \r\n      // Timeout fallback\r\n      setTimeout(() => {\r\n        if (this.synth.speaking) {\r\n          this.synth.cancel();\r\n          resolve();\r\n        }\r\n      }, 30000); // 30 second timeout\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    this.synth.cancel();\r\n  }\r\n\r\n  isSpeaking() {\r\n    return this.synth.speaking;\r\n  }\r\n\r\n  getAvailableVoices() {\r\n    return this.voices;\r\n  }\r\n\r\n  getAvailableLanguages() {\r\n    const languages = new Set();\r\n    this.voices.forEach(voice => {\r\n      const langCode = voice.lang;\r\n      languages.add(langCode);\r\n    });\r\n    return Array.from(languages);\r\n  }\r\n\r\n  // Method to check if a language is supported\r\n  isLanguageSupported(language) {\r\n    return this.voices.some(voice => voice.lang.includes(language));\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nexport const speechSynthesizer = new SpeechSynthesis();\r\n\r\n// Initialize on import\r\nspeechSynthesizer.init().catch(console.error);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}