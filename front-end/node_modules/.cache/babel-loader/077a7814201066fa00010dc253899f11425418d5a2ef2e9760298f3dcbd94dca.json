{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nexport const useSpeechRecognitionHook = onResult => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState('en-US');\n  const timeoutRef = useRef(null);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  useEffect(() => {\n    if (transcript && !listening) {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      timeoutRef.current = setTimeout(() => {\n        if (transcript.trim().length > 0) {\n          onResult(transcript, selectedLanguage);\n          resetTranscript();\n        }\n      }, 1000);\n    }\n  }, [transcript, listening, onResult, resetTranscript, selectedLanguage]);\n  const startListening = (language = 'en-US') => {\n    setSelectedLanguage(language);\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: language\n    });\n    setIsListening(true);\n  };\n  const stopListening = () => {\n    SpeechRecognition.stopListening();\n    setIsListening(false);\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n  };\n  const supportedLanguages = [{\n    code: 'en-US',\n    name: 'English',\n    nativeName: 'English'\n  }, {\n    code: 'hi-IN',\n    name: 'Hindi',\n    nativeName: 'हिन्दी'\n  }, {\n    code: 'te-IN',\n    name: 'Telugu',\n    nativeName: 'తెలుగు'\n  }, {\n    code: 'ta-IN',\n    name: 'Tamil',\n    nativeName: 'தமிழ்'\n  }, {\n    code: 'kn-IN',\n    name: 'Kannada',\n    nativeName: 'ಕನ್ನಡ'\n  }, {\n    code: 'ml-IN',\n    name: 'Malayalam',\n    nativeName: 'മലയാളം'\n  }];\n  return {\n    transcript,\n    isListening: listening,\n    startListening,\n    stopListening,\n    supportedLanguages,\n    selectedLanguage,\n    setSelectedLanguage,\n    browserSupportsSpeechRecognition\n  };\n};\n_s(useSpeechRecognitionHook, \"PSqVYu+ZeM167BtUVYJpff140J0=\", false, function () {\n  return [useSpeechRecognition];\n});","map":{"version":3,"names":["useState","useEffect","useRef","SpeechRecognition","useSpeechRecognition","useSpeechRecognitionHook","onResult","_s","isListening","setIsListening","selectedLanguage","setSelectedLanguage","timeoutRef","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","current","clearTimeout","setTimeout","trim","length","startListening","language","continuous","stopListening","supportedLanguages","code","name","nativeName"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/hooks/useSpeechRecognition.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nexport const useSpeechRecognitionHook = (onResult) => {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [selectedLanguage, setSelectedLanguage] = useState('en-US');\r\n  const timeoutRef = useRef(null);\r\n\r\n  const {\r\n    transcript,\r\n    listening,\r\n    resetTranscript,\r\n    browserSupportsSpeechRecognition\r\n  } = useSpeechRecognition();\r\n\r\n  useEffect(() => {\r\n    if (transcript && !listening) {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n      \r\n      timeoutRef.current = setTimeout(() => {\r\n        if (transcript.trim().length > 0) {\r\n          onResult(transcript, selectedLanguage);\r\n          resetTranscript();\r\n        }\r\n      }, 1000);\r\n    }\r\n  }, [transcript, listening, onResult, resetTranscript, selectedLanguage]);\r\n\r\n  const startListening = (language = 'en-US') => {\r\n    setSelectedLanguage(language);\r\n    SpeechRecognition.startListening({\r\n      continuous: true,\r\n      language: language\r\n    });\r\n    setIsListening(true);\r\n  };\r\n\r\n  const stopListening = () => {\r\n    SpeechRecognition.stopListening();\r\n    setIsListening(false);\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n  };\r\n\r\n  const supportedLanguages = [\r\n    { code: 'en-US', name: 'English', nativeName: 'English' },\r\n    { code: 'hi-IN', name: 'Hindi', nativeName: 'हिन्दी' },\r\n    { code: 'te-IN', name: 'Telugu', nativeName: 'తెలుగు' },\r\n    { code: 'ta-IN', name: 'Tamil', nativeName: 'தமிழ்' },\r\n    { code: 'kn-IN', name: 'Kannada', nativeName: 'ಕನ್ನಡ' },\r\n    { code: 'ml-IN', name: 'Malayalam', nativeName: 'മലയാളം' }\r\n  ];\r\n\r\n  return {\r\n    transcript,\r\n    isListening: listening,\r\n    startListening,\r\n    stopListening,\r\n    supportedLanguages,\r\n    selectedLanguage,\r\n    setSelectedLanguage,\r\n    browserSupportsSpeechRecognition\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAElF,OAAO,MAAMC,wBAAwB,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC;EACjE,MAAMY,UAAU,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE/B,MAAM;IACJW,UAAU;IACVC,SAAS;IACTC,eAAe;IACfC;EACF,CAAC,GAAGZ,oBAAoB,CAAC,CAAC;EAE1BH,SAAS,CAAC,MAAM;IACd,IAAIY,UAAU,IAAI,CAACC,SAAS,EAAE;MAC5B,IAAIF,UAAU,CAACK,OAAO,EAAE;QACtBC,YAAY,CAACN,UAAU,CAACK,OAAO,CAAC;MAClC;MAEAL,UAAU,CAACK,OAAO,GAAGE,UAAU,CAAC,MAAM;QACpC,IAAIN,UAAU,CAACO,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAChCf,QAAQ,CAACO,UAAU,EAAEH,gBAAgB,CAAC;UACtCK,eAAe,CAAC,CAAC;QACnB;MACF,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAACF,UAAU,EAAEC,SAAS,EAAER,QAAQ,EAAES,eAAe,EAAEL,gBAAgB,CAAC,CAAC;EAExE,MAAMY,cAAc,GAAGA,CAACC,QAAQ,GAAG,OAAO,KAAK;IAC7CZ,mBAAmB,CAACY,QAAQ,CAAC;IAC7BpB,iBAAiB,CAACmB,cAAc,CAAC;MAC/BE,UAAU,EAAE,IAAI;MAChBD,QAAQ,EAAEA;IACZ,CAAC,CAAC;IACFd,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMgB,aAAa,GAAGA,CAAA,KAAM;IAC1BtB,iBAAiB,CAACsB,aAAa,CAAC,CAAC;IACjChB,cAAc,CAAC,KAAK,CAAC;IACrB,IAAIG,UAAU,CAACK,OAAO,EAAE;MACtBC,YAAY,CAACN,UAAU,CAACK,OAAO,CAAC;IAClC;EACF,CAAC;EAED,MAAMS,kBAAkB,GAAG,CACzB;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAU,CAAC,EACzD;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAS,CAAC,EACtD;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAS,CAAC,EACvD;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAQ,CAAC,EACrD;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAQ,CAAC,EACvD;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,WAAW;IAAEC,UAAU,EAAE;EAAS,CAAC,CAC3D;EAED,OAAO;IACLhB,UAAU;IACVL,WAAW,EAAEM,SAAS;IACtBQ,cAAc;IACdG,aAAa;IACbC,kBAAkB;IAClBhB,gBAAgB;IAChBC,mBAAmB;IACnBK;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CA/DWF,wBAAwB;EAAA,QAU/BD,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}