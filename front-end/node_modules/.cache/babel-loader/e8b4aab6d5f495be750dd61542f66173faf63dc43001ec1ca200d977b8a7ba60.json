{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohan\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\front-end\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  user\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const messagesEndRef = useRef(null);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = io('http://localhost:5000', {\n      auth: {\n        token: localStorage.getItem('token')\n      }\n    });\n    socketRef.current.on('connect', () => {\n      setConnectionStatus('connected');\n    });\n    socketRef.current.on('disconnect', () => {\n      setConnectionStatus('disconnected');\n    });\n    socketRef.current.on('chat_message', data => {\n      setIsTyping(false);\n\n      // Ensure we're only storing strings, not objects\n      const newMessage = {\n        id: Date.now(),\n        text: typeof data.message === 'string' ? data.message : JSON.stringify(data.message),\n        sender: 'bot',\n        timestamp: new Date(),\n        structuredData: data.structuredData\n      };\n      setMessages(prev => [...prev, newMessage]);\n    });\n    socketRef.current.on('bot_typing', () => {\n      setIsTyping(true);\n    });\n    socketRef.current.on('error', error => {\n      setIsTyping(false);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Sorry, I'm having trouble connecting. Please try again.\",\n        sender: 'bot',\n        timestamp: new Date()\n      }]);\n    });\n    fetchChatHistory();\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const fetchChatHistory = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/chat/history', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const history = await response.json();\n        const formatted = history.map(chat => ({\n          id: chat.chat_id || Date.now(),\n          text: typeof chat.query === 'string' ? chat.query : JSON.stringify(chat.query, null, 2),\n          sender: 'user',\n          timestamp: new Date(chat.timestamp),\n          response: typeof chat.response === 'string' ? chat.response : JSON.stringify(chat.response, null, 2)\n        }));\n        setMessages(formatted);\n      }\n    } catch (err) {\n      console.error('Error fetching chat history:', err);\n    }\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: Date.now(),\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n    if (socketRef.current) {\n      socketRef.current.emit('user_message', {\n        message: inputMessage,\n        userId: user.id\n      });\n    }\n  };\n  const renderStructuredData = data => {\n    if (!data || typeof data !== 'object') return null;\n    const sections = ['symptoms', 'precautions', 'medicine', 'food', 'other'];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"structured-response\",\n      children: sections.map(section => data[section] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [section.charAt(0).toUpperCase() + section.slice(1), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), \" \", String(data[section])]\n      }, section, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  };\n  const renderMessageContent = message => {\n    // If it's a string, show it directly\n    if (typeof message === 'string') return message;\n\n    // If it's an object, try to extract actual text\n    if (typeof message === 'object' && message !== null) {\n      // Prioritize known fields\n      if (message.message) return String(message.message);\n      if (message.text) return String(message.text);\n      if (message.response) return String(message.response);\n\n      // Fallback: safely stringify small objects only\n      try {\n        return JSON.stringify(message, (key, value) => {\n          // Avoid internal Node.js fields\n          if (['_events', '_readableState', '_writableState', '_parentObj'].includes(key)) return undefined;\n          return value;\n        }, 2);\n      } catch (e) {\n        return \"[Unable to display message]\";\n      }\n    }\n    return String(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Health Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Hello, \", user === null || user === void 0 ? void 0 : user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `connection-status ${connectionStatus}`,\n          children: connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && !isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Start a conversation with your health assistant!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ask about symptoms, medications, or general health advice.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}-message`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: renderMessageContent(message.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), message.structuredData && renderStructuredData(message.structuredData), message.response && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"response-content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: renderMessageContent(message.response)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 70\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: new Date(message.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot-message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input-form\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Type your health question here...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isTyping || !inputMessage.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"7MDtHHEkv+E7Hd8tLvk72jW8Txc=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","jsxDEV","_jsxDEV","ChatInterface","user","_s","messages","setMessages","inputMessage","setInputMessage","isTyping","setIsTyping","connectionStatus","setConnectionStatus","messagesEndRef","socketRef","current","auth","token","localStorage","getItem","on","data","newMessage","id","Date","now","text","message","JSON","stringify","sender","timestamp","structuredData","prev","error","fetchChatHistory","disconnect","_messagesEndRef$curre","scrollIntoView","behavior","response","fetch","headers","ok","history","json","formatted","map","chat","chat_id","query","err","console","handleSendMessage","e","preventDefault","trim","emit","userId","renderStructuredData","sections","className","children","section","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","String","renderMessageContent","key","value","includes","undefined","name","length","toLocaleTimeString","ref","onSubmit","type","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = ({ user }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const messagesEndRef = useRef(null);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io('http://localhost:5000', {\r\n      auth: { token: localStorage.getItem('token') }\r\n    });\r\n\r\n    socketRef.current.on('connect', () => {\r\n      setConnectionStatus('connected');\r\n    });\r\n\r\n    socketRef.current.on('disconnect', () => {\r\n      setConnectionStatus('disconnected');\r\n    });\r\n    socketRef.current.on('chat_message', (data) => {\r\n    setIsTyping(false);\r\n    \r\n    // Ensure we're only storing strings, not objects\r\n    const newMessage = {\r\n        id: Date.now(),\r\n        text: typeof data.message === 'string' ? data.message : JSON.stringify(data.message),\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        structuredData: data.structuredData\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newMessage]);\r\n    });\r\n\r\n\r\n    socketRef.current.on('bot_typing', () => {\r\n      setIsTyping(true);\r\n    });\r\n\r\n    socketRef.current.on('error', (error) => {\r\n      setIsTyping(false);\r\n      setMessages(prev => [...prev, {\r\n        id: Date.now(),\r\n        text: \"Sorry, I'm having trouble connecting. Please try again.\",\r\n        sender: 'bot',\r\n        timestamp: new Date()\r\n      }]);\r\n    });\r\n\r\n    fetchChatHistory();\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const fetchChatHistory = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('http://localhost:5000/chat/history', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      if (response.ok) {\r\n        const history = await response.json();\r\n        const formatted = history.map(chat => ({\r\n          id: chat.chat_id || Date.now(),\r\n          text: typeof chat.query === 'string' ? chat.query : JSON.stringify(chat.query, null, 2),\r\n          sender: 'user',\r\n          timestamp: new Date(chat.timestamp),\r\n          response: typeof chat.response === 'string' ? chat.response : JSON.stringify(chat.response, null, 2)\r\n        }));\r\n        setMessages(formatted);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching chat history:', err);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n    const newMessage = { id: Date.now(), text: inputMessage, sender: 'user', timestamp: new Date() };\r\n    setMessages(prev => [...prev, newMessage]);\r\n    setInputMessage('');\r\n    setIsTyping(true);\r\n    if (socketRef.current) {\r\n      socketRef.current.emit('user_message', { message: inputMessage, userId: user.id });\r\n    }\r\n  };\r\n\r\n  const renderStructuredData = (data) => {\r\n    if (!data || typeof data !== 'object') return null;\r\n    const sections = ['symptoms', 'precautions', 'medicine', 'food', 'other'];\r\n    return (\r\n      <div className=\"structured-response\">\r\n        {sections.map(section => (\r\n          data[section] && (\r\n            <div key={section} className=\"response-section\">\r\n              <strong>{section.charAt(0).toUpperCase() + section.slice(1)}:</strong> {String(data[section])}\r\n            </div>\r\n          )\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst renderMessageContent = (message) => {\r\n  // If it's a string, show it directly\r\n  if (typeof message === 'string') return message;\r\n\r\n  // If it's an object, try to extract actual text\r\n  if (typeof message === 'object' && message !== null) {\r\n    // Prioritize known fields\r\n    if (message.message) return String(message.message);\r\n    if (message.text) return String(message.text);\r\n    if (message.response) return String(message.response);\r\n\r\n    // Fallback: safely stringify small objects only\r\n    try {\r\n      return JSON.stringify(message, (key, value) => {\r\n        // Avoid internal Node.js fields\r\n        if (['_events', '_readableState', '_writableState', '_parentObj'].includes(key)) return undefined;\r\n        return value;\r\n      }, 2);\r\n    } catch (e) {\r\n      return \"[Unable to display message]\";\r\n    }\r\n  }\r\n\r\n  return String(message);\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <header className=\"chat-header\">\r\n        <h2>Health Assistant</h2>\r\n        <div className=\"user-info\">\r\n          <span>Hello, {user?.name}</span>\r\n          <span className={`connection-status ${connectionStatus}`}>\r\n            {connectionStatus === 'connected' ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected'}\r\n          </span>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.length === 0 && !isTyping && (\r\n          <div className=\"empty-chat\">\r\n            <p>Start a conversation with your health assistant!</p>\r\n            <p>Ask about symptoms, medications, or general health advice.</p>\r\n          </div>\r\n        )}\r\n        {messages.map(message => (\r\n          <div key={message.id} className={`message ${message.sender}-message`}>\r\n            <div className=\"message-content\">\r\n              <p>{renderMessageContent(message.text)}</p>\r\n              {message.structuredData && renderStructuredData(message.structuredData)}\r\n              {message.response && <div className=\"response-content\"><p>{renderMessageContent(message.response)}</p></div>}\r\n              <span className=\"message-time\">{new Date(message.timestamp).toLocaleTimeString()}</span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"message bot-message\">\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span><span></span><span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <form className=\"chat-input-form\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n          placeholder=\"Type your health question here...\"\r\n          disabled={isTyping}\r\n        />\r\n        <button type=\"submit\" disabled={isTyping || !inputMessage.trim()}>Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}