{"ast":null,"code":"class SpeechSynthesis {\n  constructor() {\n    this.synth = window.speechSynthesis;\n    this.voices = [];\n    this.selectedVoice = null;\n    this.rate = 1.0;\n    this.pitch = 1.0;\n    this.volume = 0.8;\n  }\n  init() {\n    return new Promise(resolve => {\n      if (this.synth.getVoices().length > 0) {\n        this.voices = this.synth.getVoices();\n        this.selectVoice();\n        resolve();\n      } else {\n        this.synth.onvoiceschanged = () => {\n          this.voices = this.synth.getVoices();\n          this.selectVoice();\n          resolve();\n        };\n      }\n    });\n  }\n  selectVoice(language = 'en-US') {\n    // Prefer Google voices for better quality\n    const preferredVoices = this.voices.filter(voice => voice.voiceURI.includes('Google') && voice.lang.includes(language));\n    if (preferredVoices.length > 0) {\n      this.selectedVoice = preferredVoices[0];\n    } else {\n      // Fallback to any voice for the language\n      const languageVoices = this.voices.filter(voice => voice.lang.includes(language));\n      this.selectedVoice = languageVoices[0] || null;\n    }\n  }\n\n  // Enhanced text cleaning function for speech\n  cleanTextForSpeech(text) {\n    if (typeof text !== 'string') return String(text);\n\n    // Remove all markdown formatting, asterisks, bullets, numbers\n    let cleanedText = text.replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown but keep text\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic markdown but keep text\n    .replace(/```[\\s\\S]*?```/g, '') // Remove code blocks\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/#{1,6}\\s?/g, '') // Remove headers\n    .replace(/\\n\\s*[-*•]\\s*/g, '. ') // Convert bullet points to pauses\n    .replace(/\\n\\s*\\d+\\.\\s*/g, '. ') // Convert numbered lists to pauses\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove markdown links but keep text\n    .replace(/<[^>]*>/g, '') // Remove HTML tags\n    .replace(/\\*/g, '') // Remove remaining asterisks\n    .replace(/#/g, '') // Remove hash symbols\n    .replace(/`/g, '') // Remove backticks\n    .replace(/~/g, '') // Remove tildes\n    .replace(/_/g, ' ') // Replace underscores with spaces\n    .replace(/\\s+/g, ' ') // Collapse multiple spaces\n    .trim();\n\n    // Clean up punctuation for better speech flow\n    cleanedText = cleanedText.replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ') // Replace ellipses with single period\n    .replace(/\\s*,\\s*/g, ', ') // Normalize commas\n    .replace(/\\s*;\\s*/g, '. ') // Convert semicolons to pauses\n    .replace(/\\s*:\\s*/g, ': ') // Normalize colons\n    .replace(/\\s*!\\s*/g, '! ') // Normalize exclamations\n    .replace(/\\s*\\?\\s*/g, '? ') // Normalize questions\n    .replace(/\\s*\\.\\s*/g, '. ') // Normalize periods\n    .replace(/\\.\\s*\\./g, '. ') // Remove consecutive periods\n    .replace(/\\s{2,}/g, ' ') // Remove extra spaces\n    .trim();\n\n    // Add natural pauses for better speech rhythm\n    cleanedText = cleanedText.replace(/\\.\\s+/g, '. ') // Ensure space after periods\n    .replace(/\\?\\s+/g, '? ') // Ensure space after questions\n    .replace(/!\\s+/g, '! ') // Ensure space after exclamations\n    .replace(/,\\s+/g, ', ') // Ensure space after commas\n    .replace(/:\\s+/g, ': '); // Ensure space after colons\n\n    return cleanedText;\n  }\n  speak(text, language = 'en-US') {\n    if (this.synth.speaking) {\n      this.synth.cancel();\n    }\n    this.selectVoice(language);\n\n    // Clean the text before speaking\n    const cleanedText = this.cleanTextForSpeech(text);\n    if (!cleanedText || cleanedText.trim().length === 0) {\n      console.log('No text to speak after cleaning');\n      return Promise.resolve();\n    }\n    const utterance = new SpeechSynthesisUtterance(cleanedText);\n    utterance.voice = this.selectedVoice;\n    utterance.rate = this.rate;\n    utterance.pitch = this.pitch;\n    utterance.volume = this.volume;\n    utterance.lang = language;\n\n    // Enhanced utterance settings for better speech quality\n    utterance.onstart = () => console.log('Speech started');\n    utterance.onend = () => console.log('Speech ended');\n    utterance.onerror = event => console.error('Speech error:', event.error);\n    this.synth.speak(utterance);\n    return new Promise((resolve, reject) => {\n      utterance.onend = () => {\n        console.log('Speech synthesis completed');\n        resolve();\n      };\n      utterance.onerror = event => {\n        console.error('Speech synthesis error:', event);\n        reject(event.error);\n      };\n    });\n  }\n  stop() {\n    this.synth.cancel();\n  }\n  isSpeaking() {\n    return this.synth.speaking;\n  }\n  getAvailableLanguages() {\n    const languages = new Set();\n    this.voices.forEach(voice => {\n      const langCode = voice.lang;\n      languages.add(langCode);\n    });\n    return Array.from(languages);\n  }\n}\nexport const speechSynthesizer = new SpeechSynthesis();","map":{"version":3,"names":["SpeechSynthesis","constructor","synth","window","speechSynthesis","voices","selectedVoice","rate","pitch","volume","init","Promise","resolve","getVoices","length","selectVoice","onvoiceschanged","language","preferredVoices","filter","voice","voiceURI","includes","lang","languageVoices","cleanTextForSpeech","text","String","cleanedText","replace","trim","speak","speaking","cancel","console","log","utterance","SpeechSynthesisUtterance","onstart","onend","onerror","event","error","reject","stop","isSpeaking","getAvailableLanguages","languages","Set","forEach","langCode","add","Array","from","speechSynthesizer"],"sources":["C:/Users/mohan/OneDrive/Desktop/Chatbot/front-end/src/utils/speechSynthesis.js"],"sourcesContent":["class SpeechSynthesis {\r\n  constructor() {\r\n    this.synth = window.speechSynthesis;\r\n    this.voices = [];\r\n    this.selectedVoice = null;\r\n    this.rate = 1.0;\r\n    this.pitch = 1.0;\r\n    this.volume = 0.8;\r\n  }\r\n\r\n  init() {\r\n    return new Promise((resolve) => {\r\n      if (this.synth.getVoices().length > 0) {\r\n        this.voices = this.synth.getVoices();\r\n        this.selectVoice();\r\n        resolve();\r\n      } else {\r\n        this.synth.onvoiceschanged = () => {\r\n          this.voices = this.synth.getVoices();\r\n          this.selectVoice();\r\n          resolve();\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  selectVoice(language = 'en-US') {\r\n    // Prefer Google voices for better quality\r\n    const preferredVoices = this.voices.filter(voice => \r\n      voice.voiceURI.includes('Google') && voice.lang.includes(language)\r\n    );\r\n    \r\n    if (preferredVoices.length > 0) {\r\n      this.selectedVoice = preferredVoices[0];\r\n    } else {\r\n      // Fallback to any voice for the language\r\n      const languageVoices = this.voices.filter(voice => \r\n        voice.lang.includes(language)\r\n      );\r\n      this.selectedVoice = languageVoices[0] || null;\r\n    }\r\n  }\r\n\r\n  // Enhanced text cleaning function for speech\r\n  cleanTextForSpeech(text) {\r\n    if (typeof text !== 'string') return String(text);\r\n    \r\n    // Remove all markdown formatting, asterisks, bullets, numbers\r\n    let cleanedText = text\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown but keep text\r\n      .replace(/\\*(.*?)\\*/g, '$1')     // Remove italic markdown but keep text\r\n      .replace(/```[\\s\\S]*?```/g, '')  // Remove code blocks\r\n      .replace(/`(.*?)`/g, '$1')       // Remove inline code\r\n      .replace(/#{1,6}\\s?/g, '')       // Remove headers\r\n      .replace(/\\n\\s*[-*•]\\s*/g, '. ') // Convert bullet points to pauses\r\n      .replace(/\\n\\s*\\d+\\.\\s*/g, '. ') // Convert numbered lists to pauses\r\n      .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove markdown links but keep text\r\n      .replace(/<[^>]*>/g, '')         // Remove HTML tags\r\n      .replace(/\\*/g, '')              // Remove remaining asterisks\r\n      .replace(/#/g, '')               // Remove hash symbols\r\n      .replace(/`/g, '')               // Remove backticks\r\n      .replace(/~/g, '')               // Remove tildes\r\n      .replace(/_/g, ' ')              // Replace underscores with spaces\r\n      .replace(/\\s+/g, ' ')            // Collapse multiple spaces\r\n      .trim();\r\n\r\n    // Clean up punctuation for better speech flow\r\n    cleanedText = cleanedText\r\n      .replace(/\\s*\\.\\s*\\.\\s*\\./g, '. ') // Replace ellipses with single period\r\n      .replace(/\\s*,\\s*/g, ', ')         // Normalize commas\r\n      .replace(/\\s*;\\s*/g, '. ')         // Convert semicolons to pauses\r\n      .replace(/\\s*:\\s*/g, ': ')         // Normalize colons\r\n      .replace(/\\s*!\\s*/g, '! ')         // Normalize exclamations\r\n      .replace(/\\s*\\?\\s*/g, '? ')        // Normalize questions\r\n      .replace(/\\s*\\.\\s*/g, '. ')        // Normalize periods\r\n      .replace(/\\.\\s*\\./g, '. ')         // Remove consecutive periods\r\n      .replace(/\\s{2,}/g, ' ')           // Remove extra spaces\r\n      .trim();\r\n\r\n    // Add natural pauses for better speech rhythm\r\n    cleanedText = cleanedText\r\n      .replace(/\\.\\s+/g, '. ')           // Ensure space after periods\r\n      .replace(/\\?\\s+/g, '? ')           // Ensure space after questions\r\n      .replace(/!\\s+/g, '! ')            // Ensure space after exclamations\r\n      .replace(/,\\s+/g, ', ')            // Ensure space after commas\r\n      .replace(/:\\s+/g, ': ');           // Ensure space after colons\r\n\r\n    return cleanedText;\r\n  }\r\n\r\n  speak(text, language = 'en-US') {\r\n    if (this.synth.speaking) {\r\n      this.synth.cancel();\r\n    }\r\n\r\n    this.selectVoice(language);\r\n\r\n    // Clean the text before speaking\r\n    const cleanedText = this.cleanTextForSpeech(text);\r\n    \r\n    if (!cleanedText || cleanedText.trim().length === 0) {\r\n      console.log('No text to speak after cleaning');\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(cleanedText);\r\n    utterance.voice = this.selectedVoice;\r\n    utterance.rate = this.rate;\r\n    utterance.pitch = this.pitch;\r\n    utterance.volume = this.volume;\r\n    utterance.lang = language;\r\n\r\n    // Enhanced utterance settings for better speech quality\r\n    utterance.onstart = () => console.log('Speech started');\r\n    utterance.onend = () => console.log('Speech ended');\r\n    utterance.onerror = (event) => console.error('Speech error:', event.error);\r\n\r\n    this.synth.speak(utterance);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      utterance.onend = () => {\r\n        console.log('Speech synthesis completed');\r\n        resolve();\r\n      };\r\n      utterance.onerror = (event) => {\r\n        console.error('Speech synthesis error:', event);\r\n        reject(event.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    this.synth.cancel();\r\n  }\r\n\r\n  isSpeaking() {\r\n    return this.synth.speaking;\r\n  }\r\n\r\n  getAvailableLanguages() {\r\n    const languages = new Set();\r\n    this.voices.forEach(voice => {\r\n      const langCode = voice.lang;\r\n      languages.add(langCode);\r\n    });\r\n    return Array.from(languages);\r\n  }\r\n}\r\n\r\nexport const speechSynthesizer = new SpeechSynthesis();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}